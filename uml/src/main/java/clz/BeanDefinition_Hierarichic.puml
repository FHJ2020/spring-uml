
@startuml
title BeanDefinition 类结构








class BeanDefinitionHolder implements BeanMetadataElement{
    - BeanDefinition beanDefinition
    - String beanName
    - String[] aliases
}

skinparam groupInheritance 5
namespace beanDefinitions{
    note as n1
    **BeanDefinition**
    @PostConstruct解析后会被添加到 externallyManagedInitMethods
    @PreDestroy解析后会被添加到 externallyManagedDestroyMethods
    @Resource解析后,会被添加到 externallyManagedConfigMembers
    MergedBeanDefinitionPostProcessor 处理后会变成true,只会merge一次
    ====
    **GenericBeanDefinition**
    xml定义的bean
    ====
    **ScannedGenericBeanDefinition**
    @Component 定义的Bean
    ====

    end note

    ' BeanDefinition
    interface BeanDefinition{
        + MutablePropertyValues getPropertyValues()
    }

    interface AnnotatedBeanDefinition
    AnnotatedBeanDefinition -u----|> BeanDefinition


    abstract class AbstractBeanDefinition {
        - MutablePropertyValues propertyValues
        - MethodOverrides methodOverrides
    }
    AbstractBeanDefinition .u..|>BeanDefinition
    'AbstractBeanDefinition -l[hidden]- GenericBeanDefinition
    'AnnotatedBeanDefinition -r[hidden]- AbstractBeanDefinition


    class RootBeanDefinition {
        - boolean postProcessed = false
        - Object beanClass
        - BeanDefinitionHolder decoratedDefinition
        - Set<Member> externallyManagedConfigMembers
        - Set<String> externallyManagedInitMethods
        - Set<String> externallyManagedDestroyMethods
    }

    RootBeanDefinition -u--|> AbstractBeanDefinition

    class ClassDerivedBeanDefinition extends RootBeanDefinition
    class ConfigurationClassBeanDefinition extends RootBeanDefinition implements AnnotatedBeanDefinition
    class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition{
        - AnnotationMetadata metadata
    }
    class ScannedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition
    class EntityScanPackagesBeanDefinition extends GenericBeanDefinition
    class BasePackagesBeanDefinition extends GenericBeanDefinition
    class ServletComponentRegisteringPostProcessorBeanDefinition extends GenericBeanDefinition
    class GenericBeanDefinition extends AbstractBeanDefinition
    ChildBeanDefinition -u--|> AbstractBeanDefinition








}
beanDefinitions.AbstractBeanDefinition "1" -r--> "1" properties.MutablePropertyValues



namespace readerAndParser{
    note bottom of readerAndParser
    **spring-boot BeanDefinitionLoader**
    AnnotatedBeanDefinitionReader annotatedReader;
    AbstractBeanDefinitionReader xmlReader;
    BeanDefinitionReader groovyReader;
    ** **
    end note


    class ConfigurationClassParser{
        - ComponentScanAnnotationParser componentScanParser
        - ConditionEvaluator conditionEvaluator
        - Map<ConfigurationClass, ConfigurationClass> configurationClasses
    }
    note left of ConfigurationClassParser
    @Configuration注解处理
    @PropertySources
    @PropertySource
    @ComponentScans
    @ComponentScan

    end note
    class ComponentScanAnnotationParser
    note left of ComponentScanAnnotationParser
    使用@ComponentScan解析出的属性进行扫描
    end note
    ComponentScanAnnotationParser -r[#blue]---> ClassPathBeanDefinitionScanner : parse beanDefinition
    ConfigurationClassParser -u[#blue]--> ComponentScanAnnotationParser : has ComponentScanAnnotationParser


    class XmlBeanDefinitionReader extends AbstractBeanDefinitionReader
    class GroovyBeanDefinitionReader extends AbstractBeanDefinitionReader
    class AnnotatedBeanDefinitionReader{
        void register(Class<?>... componentClasses)
    }

    AnnotatedBeanDefinitionReader -u[#green]--> beanDefinitions.AnnotatedGenericBeanDefinition : register
    note right on link
    springBootApplication中的 main class
    注册成一个spring管理的bean
    ====
    **AnnotationConfigUtils.registerAnnotationConfigProcessors**

    scopeMetadataResolver.resolveScopeMetadata(abd)
    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);
    AnnotationConfigUtils.applyScopedProxyMode
    @Primary
    @Lazy
    end note




    class ClassPathScanningCandidateComponentProvider{
        # void registerDefaultFilters()
        - List<TypeFilter> includeFilters
        - List<TypeFilter> excludeFilters
    }
    note bottom of ClassPathScanningCandidateComponentProvider
    registerDefaultFilters注册@Component作为扫描条件
    end note

    class ClassPathBeanDefinitionScanner {
        - BeanDefinitionRegistry registry
        - BeanDefinitionDefaults beanDefinitionDefaults
        - String[] autowireCandidatePatterns
        - BeanNameGenerator beanNameGenerator = AnnotationBeanNameGenerator.INSTANCE;
        - ScopeMetadataResolver scopeMetadataResolver = new AnnotationScopeMetadataResolver
        - boolean includeAnnotationConfig = true

        # Set<BeanDefinitionHolder> doScan(String... basePackages)
    }
    ClassPathBeanDefinitionScanner -r-|> ClassPathScanningCandidateComponentProvider
    'ClassPathScanningCandidateComponentProvider -l- ClassPathBeanDefinitionScanner

    ClassPathBeanDefinitionScanner ----> beanDefinitions.ScannedGenericBeanDefinition #skyblue

    note bottom of ClassPathBeanDefinitionScanner
    **xml配置属性处理**
    解析属性 use-default-filters、resource-pattern、name-generator、
    scope-resolver、scoped-proxy、exclude-filter、
    include-filter、type、expression 赋值给对应的属性
    **注解属性处理**
    #扫描class文件,将有@Component注解的class,解析成ScannedGenericBeanDefinition
    #解析ScannedGenericBeanDefinition中的@Scope注解,赋值给对应的属性([[./ScopeProxy.puml proxy相关处理]])
    #AnnotationBeanNameGenerator对ScannedGenericBeanDefinition生成beanName
    #默认值赋值处理 BeanDefinitionDefaults
    #解析@Lazy @Primary @DependsOn @Role @Description,赋值给对应的属性

    end note
}
'beanDefinitions -[hidden]- readerAndParser
'readerAndParser -u- xmlParser

namespace xmlParser{

    interface BeanDefinitionParser{
        BeanDefinition parse(Element element, ParserContext parserContext);
    }
    note left of BeanDefinitionParser
    解析beans标签下顶级自定义namespace
    转换成BeanDefinitionHolder注册到BeanDefinitionRegistry中
    end note



    class ComponentScanBeanDefinitionParser {
        + BeanDefinition parse(Element element, ParserContext parserContext)
    }
    ComponentScanBeanDefinitionParser .d..|> BeanDefinitionParser
    ComponentScanBeanDefinitionParser -u[#red]-----> readerAndParser.ClassPathBeanDefinitionScanner : parse beanDefinition
    note left of ComponentScanBeanDefinitionParser
    **处理component-scan** 与@ComponentScan 相同的功能
    使用@Component作为默认的扫描过滤条件(包含@Component声明的注解),
    作为参数创建ClassPathBeanDefinitionScanner
    默添加 annotation-config 的BeanFactoryPostProcessor(处理属性、方法、字段的注解)处理器bd

    @Component @Repository @Service
    @Controller @RestController @ControllerAdvice @Configuration
    end note
    class AnnotationConfigBeanDefinitionParser
    AnnotationConfigBeanDefinitionParser .u..|> BeanDefinitionParser
    note left of AnnotationConfigBeanDefinitionParser
    **不解析任何注解**
    处理annotation-config
    注册注解处理器的BeanDefinition
     ConfigurationClassPostProcessor
     AutowiredAnnotationBeanPostProcessor
     CommonAnnotationBeanPostProcessor
     jpa注解处理器
     EventListenerMethodProcessor
     DefaultEventListenerFactory
    bd.role=ROLE_INFRASTRUCTURE

    @Required,
    @Autowired,
    @PostConstruct,
    @PreDestroy,
    @Resource,
    @PersistenceContext
    @PersistenceUnit

    end note


}
namespace postProcesses{
    class ConfigurationClassPostProcessor
    ConfigurationClassPostProcessor .d..|> BeanDefinitionRegistryPostProcessor
    ConfigurationClassPostProcessor -u[#blue]-> readerAndParser.ConfigurationClassParser : parse @Configuration
}

namespace namespaceHandlers{


    abstract class NamespaceHandlerSupport implements NamespaceHandler
    class ContextNamespaceHandler extends NamespaceHandlerSupport
    note bottom of ContextNamespaceHandler
    context nameSpace处理器
    <context:component-scan annotation-config="true" />
    <context:annotation-config />
    ...
    end note

    class AopNamespaceHandler extends NamespaceHandlerSupport
    class MvcNamespaceHandler extends NamespaceHandlerSupport


    NamespaceHandler -r--> xmlParser.BeanDefinitionParser : 注册parser
}


'properties
namespace properties{
    interface  Iterable << PropertyValue >>
    interface PropertyValues {
        + PropertyValue getPropertyValue(String propertyName)
        + PropertyValue[] getPropertyValues()
    }
    PropertyValues -u-|> Iterable

    class MutablePropertyValues {
        - List<PropertyValue> propertyValueList
        - Set<String> processedProperties
        - boolean converted
    }
    MutablePropertyValues "1" --> "manay" PropertyValue
    MutablePropertyValues  .u.|>  PropertyValues

    class PropertyValue {
    	- String name
    	- Object value
    }
}



interface BeanReference extends BeanMetadataElement
class RuntimeBeanNameReference implements BeanReference
class RuntimeBeanReference implements BeanReference

interface AttributeAccessor
abstract class AttributeAccessorSupport implements AttributeAccessor
class BeanMetadataAttributeAccessor extends AttributeAccessorSupport implements BeanMetadataElement



@enduml