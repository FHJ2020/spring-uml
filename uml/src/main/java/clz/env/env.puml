@startuml
'https://plantuml.com/class-diagram

'PropertySource
interface PropertySourceFactory {
	PropertySource<?> createPropertySource(@Nullable String name, EncodedResource resource)
}

PropertySourceFactory::createPropertySource --> ResourcePropertySource
class DefaultPropertySourceFactory implements PropertySourceFactory


abstract class PropertySource<T>{
    # String name
    # T source
}

abstract class EnumerablePropertySource<T> extends PropertySource
class MapPropertySource extends EnumerablePropertySource
class PropertiesPropertySource extends MapPropertySource
class ResourcePropertySource extends PropertiesPropertySource



interface PropertyResolver{
	+ boolean containsProperty(String key);
	+ String getProperty(String key);
	+ String getProperty(String key, String defaultValue);
	+ <T> T getProperty(String key, Class<T> targetType);
	+ <T> T getProperty(String key, Class<T> targetType, T defaultValue);
	+ String getRequiredProperty(String key) throws IllegalStateException;
	+ <T> T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;
	+ String resolvePlaceholders(String text);
	+ String resolveRequiredPlaceholders(String text) throws IllegalArgumentException;
}

interface PropertySources extends Iterable{
    + Stream<PropertySource<?>> stream()
	+ boolean contains(String name)
	+ PropertySource<?> get(String name)
}
class MutablePropertySources implements PropertySources{
    - List<PropertySource<?>> propertySourceList
    + void addLast(PropertySource<?> propertySource)
    + void addFirst(PropertySource<?> propertySource)
    + void addBefore(String relativePropertySourceName, PropertySource<?> propertySource)

}
MutablePropertySources::propertySourceList --> PropertySource

' PropertyResolver
interface ConfigurablePropertyResolver extends PropertyResolver{
	+ ConfigurableConversionService getConversionService();
	+ void setConversionService(ConfigurableConversionService conversionService);
	+ void setPlaceholderPrefix(String placeholderPrefix);
	+ void setPlaceholderSuffix(String placeholderSuffix);
	+ void setValueSeparator(@Nullable String valueSeparator);
	+ void setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNestedPlaceholders);
	+ void setRequiredProperties(String... requiredProperties);
	+ void validateRequiredProperties() throws MissingRequiredPropertiesException;
}
abstract class AbstractPropertyResolver implements ConfigurablePropertyResolver

class PropertySourcesPropertyResolver extends AbstractPropertyResolver

note bottom of PropertySourcesPropertyResolver
PropertySourcesPlaceholderConfigurer 构造 PropertySourcesPropertyResolver 解析属性文件
end note


' Environment
interface EnvironmentCapable {
	Environment getEnvironment()
}

interface Environment extends PropertyResolver {
	+ String[] getActiveProfiles()
	+ String[] getDefaultProfiles()
	+ boolean acceptsProfiles(Profiles profiles)
}
note bottom of Environment
profile 是对bean定义的逻辑分组,只有active的profile的
bean定义才会被注册到容器中

end note

EnvironmentCapable::getEnvironment -- Environment
@enduml