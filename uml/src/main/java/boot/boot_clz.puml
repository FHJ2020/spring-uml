@startuml


namespace spring_core {
    class SpringFactoriesLoader
    note bottom of SpringFactoriesLoader
    META-INF/spring.factories
    end note
}
namespace spring_context #skyblue {
    interface Group
    note bottom of Group
    AnnotationMetadata
    end note

    interface ApplicationContextInitializer<C extends ConfigurableApplicationContext>{
        void initialize(C applicationContext)
    }
    note top of ApplicationContextInitializer
    在ConfigurableApplicationContext调用refresh之前
    调用initialize初始化context
    end note

    interface ImportSelector
    note top of ImportSelector
    子类决定 @Configuration 类被导入
    功能类似@Import
    end note

    interface DeferredImportSelector extends ImportSelector
    note top of DeferredImportSelector
    所有@Configuration处理后,
    @Conditional
    end note


    'ImportBeanDefinitionRegistrar
    interface ImportBeanDefinitionRegistrar
    note top of ImportBeanDefinitionRegistrar
    registerBeanDefinitions

    处理时@Configuration,注册额外的beanDefinition
    @Configuration and ImportSelector,
    end note
    class AutoProxyRegistrar implements ImportBeanDefinitionRegistrar

    note as n1
    ConfigurationClassParser#processImports
    方法内部4个分支逻辑
    # **是DeferredImportSelector子类**
    处理Predicate,并调用handle即收集所有相关的DeferredImportSelector实现类
    在当前的configuration处理完后,再调用 DeferredImportSelector导入
    DeferredImportSelectorHandler封装 deferred
    # **仅ImportSelector子类,非DeferredImportSelector子类**
    selectImports方法返回需要处理的ImportsClass,可能
        普通bean
        @Configuration注解的类
        DeferredImportSelector子类
        ImportSelector子类
        ImportBeanDefinitionRegistrar子类
    再调用processImports进行处理
    <color:red> 被导入的bean的处理和当前声明@Import一起
    # **ImportBeanDefinitionRegistrar子类**
    configClass添加addImportBeanDefinitionRegistrar
    # **其他类,按照@Configuration注解方式处理**
    ====
    处理顺序
    # @Configuration 处理
    # 仅ImportSelector子类调用
    # DeferredImportSelector子类调用
    # ImportBeanDefinitionRegistrar子类调用
    ====
    @enable* @auto* 相关注解都是根据@Import上的class来起作用

    end note
    ImportBeanDefinitionRegistrar -r[#red]- n1
    ImportSelector -l[#red]- n1
}

namespace spring_boot #DarkGrey{
    class SpringApplication {
        static final SpringApplicationShutdownHook shutdownHook
        ===
        - Set<Class<?>> primarySources;
        - Set<String> sources
        - Class<?> mainApplicationClass;
        ===
        ResourceLoader resourceLoader
        BeanNameGenerator beanNameGenerator
        ConfigurableEnvironment environment
        WebApplicationType webApplicationType
        ===
        List<ApplicationContextInitializer<?>> initializers
        List<ApplicationListener<?>> listeners
        List<BootstrapRegistryInitializer> bootstrapRegistryInitializers
        ---
        ApplicationContextFactory applicationContextFactory = ApplicationContextFactory.DEFAULT
        ApplicationStartup applicationStartup = ApplicationStartup.DEFAULT
        ===
        void load(ApplicationContext context, Object[] sources)

    }
    note top of SpringApplication
    创建一个ApplicationContext
    注册CommandLinePropertySource,将命令行参数变成spring properties
    刷新context,加载所有的singleton bean
    触发CommandLineRunner bean
    ===
    从不同的源中读取bean
    AnnotatedBeanDefinitionReader
    XmlBeanDefinitionReader
    ClassPathBeanDefinitionScanner
    end note

    interface BootstrapRegistryInitializer
    note top of BootstrapRegistryInitializer
    初始化BootstrapRegistry
    end note

    interface ApplicationContextFactory {
        ConfigurableApplicationContext create(WebApplicationType webApplicationType)
    }
    note top of ApplicationContextFactory
    context的工厂类,根据不同WebApplicationType返回不同的context实例
    由SpringApplication进行配置和调用refresh方法
    默认返回 AnnotationConfigApplicationContext
    AnnotationConfigServletWebServerApplicationContext
    AnnotationConfigReactiveWebServerApplicationContext
    AnnotationConfigApplicationContext
    end note

    interface CommandLineRunner



    interface BootstrapContext
    interface BootstrapRegistry
    interface ConfigurableBootstrapContext extends BootstrapRegistry, BootstrapContext
    class DefaultBootstrapContext implements ConfigurableBootstrapContext
    note bottom of DefaultBootstrapContext
    保存context准备阶段需要用到的bean
    调用bootstrapRegistryInitializers.initialize
    end note

    class SpringApplicationRunListeners{
        List<SpringApplicationRunListener> listeners;
        void starting(ConfigurableBootstrapContext bootstrapContext, Class<?> mainApplicationClass)
        environmentPrepared(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)
        void contextPrepared(ConfigurableApplicationContext context)
        void contextLoaded(ConfigurableApplicationContext context)
        void started(ConfigurableApplicationContext context, Duration timeTaken)
        void ready(ConfigurableApplicationContext context, Duration timeTaken)
        void failed(ConfigurableApplicationContext context, Throwable exception)

    }
    interface SpringApplicationRunListener
    class EventPublishingRunListener implements SpringApplicationRunListener

    class BeanDefinitionLoader{
    	Object[] sources;
    	AnnotatedBeanDefinitionReader annotatedReader;
    	AbstractBeanDefinitionReader xmlReader;
    	BeanDefinitionReader groovyReader;
    	ClassPathBeanDefinitionScanner scanner;
    	ResourceLoader resourceLoader;

    	void load()
    	void load(Object source)

    }
    class AnnotatedBeanDefinitionReader
    class XmlBeanDefinitionReader
    class GroovyBeanDefinitionReader
    class ClassPathBeanDefinitionScanner

    BeanDefinitionLoader "1" -l- "1" AnnotatedBeanDefinitionReader
    BeanDefinitionLoader "1" -- "1" XmlBeanDefinitionReader
    BeanDefinitionLoader "1" -- "1" GroovyBeanDefinitionReader
    BeanDefinitionLoader "1" -- "1" ClassPathBeanDefinitionScanner

    AnnotatedBeanDefinitionReader -d[hidden]- XmlBeanDefinitionReader
    XmlBeanDefinitionReader -d[hidden]- GroovyBeanDefinitionReader
    GroovyBeanDefinitionReader -d[hidden]- ClassPathBeanDefinitionScanner

}



namespace boot_autoconfigure{
        AutoConfigurationImportSelector ...|> spring_context.DeferredImportSelector
        note right of AutoConfigurationImportSelector
        @EnableAutoConfiguration
        **getAutoConfigurationEntry**
        #从 spring.factories 中读取 EnableAutoConfiguration 的配置类
        #从 spring.factories 中读取 AutoConfigurationImportFilter 的配置类
        #使用有@Import(ImportAutoConfigurationImportSelector.class)的注解
        上的 ExcludedClass 过滤文件中获得的 EnableAutoConfiguration
        #使用配置的filter对上一步结果进行进一步过滤


        spring.factories 文件
        org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=
        org.springframework.boot.autoconfigure.condition.OnBeanCondition,
        org.springframework.boot.autoconfigure.condition.OnClassCondition,
        org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition

        end note


        class ImportAutoConfigurationImportSelector extends AutoConfigurationImportSelector implements DeterminableImports{
            AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata)
        }
        note bottom of ImportAutoConfigurationImportSelector

        @ImportAutoConfiguration

        end note

        interface DeterminableImports
        note right of DeterminableImports
        ImportSelector 和 ImportBeanDefinitionRegistrar 的子类实现
        可以提早确定哪些类型被导入
        end note

        'class AutoConfigurationPackages_Registrar implements spring_context.ImportBeanDefinitionRegistrar, spring_boot.DeterminableImports
        AutoConfigurationPackages_Registrar .u..|> spring_context.ImportBeanDefinitionRegistrar
        AutoConfigurationPackages_Registrar .u..|> DeterminableImports
        note bottom of AutoConfigurationPackages_Registrar
        @AutoConfigurationPackage 注解上使用@import

        end note


        '111
        namespace conditions{
                    interface Condition
                    abstract class SpringBootCondition implements Condition
                    interface ConfigurationCondition extends Condition
                    class ProfileCondition implements Condition
                    note bottom of ProfileCondition
                    @Profile
                    end note

                    abstract class FilteringSpringBootCondition extends SpringBootCondition implements AutoConfigurationImportFilter
                    class OnBeanCondition extends FilteringSpringBootCondition implements ConfigurationCondition
                    note bottom of OnBeanCondition
                    从
                    end note
                    class OnClassCondition extends FilteringSpringBootCondition
                    class OnWebApplicationCondition extends FilteringSpringBootCondition
        }

}


namespace cloud_bootstrap {
    'class BootstrapImportSelector implements spring_context.DeferredImportSelector
    BootstrapImportSelector .u..|> spring_context.DeferredImportSelector
    note right of BootstrapImportSelector
    使用SpringFactoriesLoader加载spring.factories.
    end note

}




@enduml